from pydantic import BaseModel, Field
from typing import Optional
from datetime import date

class StudentCreate(BaseModel):
    name: str
    age: int
    email: str

class Student(BaseModel):
    id: Optional[int] = None
    name: str
    age: int
    email: str

class CourseCreate(BaseModel):
    title: str
    code: str
    description: Optional[str] = None
    credits: int
    department_id: int # Assuming an integer ID for the department

class Course(BaseModel):
    id: Optional[int] = None # Auto-generated by DB
    title: str
    code: str
    description: Optional[str] = None
    credits: int
    department_id: int

class DepartmentCreate(BaseModel):
    name: str
    code: str

class Department(BaseModel):
    id: Optional[int] = None
    name: str
    code: str

class EnrollmentCreate(BaseModel):
    student_id: int
    course_id: int
    enrollment_date: Optional[date] = None
    grade: Optional[str] = None

class Enrollment(BaseModel):
    id: Optional[int] = None
    student_id: int
    course_id: int
    enrollment_date: Optional[date] = None
    grade: Optional[str] = None

class ProfessorCreate(BaseModel):
    name: str
    email: str
    department_id: int
    title: Optional[str] = None

class Professor(BaseModel):
    id: Optional[int] = None
    name: str
    email: str
    department_id: int
    title: Optional[str] = None

# --- New Models for Authentication ---

class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None
    role: str # Added role field

class UserInDB(User):
    hashed_password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None